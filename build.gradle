buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    }
}

plugins {
    id 'dev.architectury.loom' version '1.11-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.gradleup.shadow' version '8.3.6' apply false
}


architectury {
    minecraft = project.minecraft_version
}

allprojects {
    group = rootProject.maven_group
    version = rootProject.mod_version
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'

    base {
        // Set up a suffixed format for the mod jar names, e.g. `example-fabric`.
        archivesName = "$rootProject.archives_name-$project.name"
    }

    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
        flatDir {
            dirs 'lib'
        }
        maven { url = "https://maven.shedaniel.me/" }
        maven {
            url "https://maven.jamieswhiteshirt.com/libs-release"
            content {
                includeGroup "com.jamieswhiteshirt"
            }
        }
        maven {
            name = 'GeckoLib'
            url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
            content {
                includeGroupByRegex("software\\.bernie.*")
                includeGroup("com.eliotlash.mclib")
            }
        }
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }
        maven { url 'https://maven.wispforest.io/releases' }
        maven { url 'https://maven.su5ed.dev/releases' }
        maven { url 'https://maven.fabricmc.net' }
        maven {
            name = 'GeckoLib'
            url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
            content {
                includeGroupByRegex("software\\.bernie.*")
                includeGroup("com.eliotlash.mclib")
            }
        }

    }

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        // To change the versions see the gradle.properties file
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings loom.layered() {
            officialMojangMappings()
            //parchment("org.parchmentmc.data:parchment-1.20.1:2023.09.03@zip")
        }
        modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"

        // Fabric API. This is technically optional, but you probably want it anyway.
        modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"

        modImplementation ("net.eden.eden_knights:KnightsHeraldry-0.6.0")
        modImplementation ("net.eden.eden_knights:stoneycore-0.5.2")

        modImplementation "io.wispforest:owo-lib:${project.owo_version}"
        annotationProcessor "io.wispforest:owo-lib:${project.owo_version}"
        modImplementation("io.wispforest:accessories-fabric:${project.accessories_version}")

/*	modImplementation ("net.eden.eden_knights:architectury-9.2.14-fabric")
	modImplementation ("net.eden.eden_knights:bettercombat-fabric-1.8.6+1.20.1")
	modImplementation ("net.eden.eden_knights:streq-1.0.10")*/

        modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
            exclude(group: "net.fabricmc.fabric-api")
        }
/*	modImplementation ("net.eden.eden_knights:player-animation-lib-fabric-1.0.2-rc1+1.20")*/

        modImplementation("com.jamieswhiteshirt:reach-entity-attributes:$project.reach_attributes_version")

        implementation ("software.bernie.geckolib:geckolib-forge-${minecraft_version}:${geckolib_version}")
        implementation("com.eliotlash.mclib:mclib:20")

    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 17
    }

    // Configure Maven publishing.
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = base.archivesName.get()
                from components.java
            }
        }

        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
        repositories {
            // Add repositories to publish to here.
            // Notice: This block does NOT have the same function as the block in the top level.
            // The repositories here will be used for publishing your artifact, not for
            // retrieving dependencies.
        }
    }
}
